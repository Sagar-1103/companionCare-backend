import fs from "fs";
import path from "path";
import os from "os";
import PDFDocument from "pdfkit"
import { uploadOnCloudinary } from './cloudinary.js';
import { v4 as uuidv4 } from "uuid";

const generateMedicalReportPDF = async (reportData) => {
  const { patientName,doctorName,imageBase64 } = reportData;

  // Create a temporary directory for storing the PDF
  const reportsDir = path.join(os.tmpdir(), 'medical_reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir);
  }
  const uniqueId = uuidv4();
  const filePath = path.join(reportsDir, `${uniqueId}.pdf`);

  try {
    const doc = new PDFDocument({ size: 'A4' });
    const pdfStream = fs.createWriteStream(filePath);
    doc.pipe(pdfStream);

    // Header Section
    doc
      .rect(0, 0, doc.page.width, 80)
      .fill('#6a0dad');
    doc
      .fillColor('white')
      .fontSize(24)
      .text('Companion Care - Medical Report', { align: 'center', baseline: 'middle' })
      .moveDown(1.5);

    // Patient Details
    doc.fillColor('black').fontSize(16).text('Patient Details:', { underline: true }).moveDown(0.5);
    doc.fontSize(14)
      .text(`Name: ${patientName}`)
      .moveDown(1);

    // Doctor Details
    doc.fontSize(16).text('Doctor Details:', { underline: true }).moveDown(0.5);
    doc.fontSize(14).text(`${doctorName}`).moveDown(1);

    // Diagnosis Image
    if (imageBase64) {
      const imageBuffer = Buffer.from(imageBase64, 'base64');
      doc.fontSize(16).text('Highlighted Diagnosis Image:', { underline: true }).moveDown(0.5);
      doc.image(imageBuffer, { fit: [200, 200], align: 'center', valign: 'center' }).moveDown(1);
    }

    // Footer
    doc
      .fontSize(12)
      .fillColor('gray')
      .text('Generated by Companion Care System', { align: 'center' })
      .moveDown(0.5);

    doc.end();

    await new Promise((resolve, reject) => {
      pdfStream.on('finish', resolve);
      pdfStream.on('error', reject);
    });

    console.log(`PDF stored temporarily at: ${filePath}`);

    // Upload the generated PDF to Cloudinary
    const uploadedPdf = await uploadOnCloudinary(filePath);

    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }

    if (!uploadedPdf) {
      throw new Error("Some error occurred while uploading the PDF to Cloudinary");
    }

    return uploadedPdf.secure_url;

  } catch (error) {
    console.error("Error during PDF generation or upload:", error);
    throw error;
  }
};

export default generateMedicalReportPDF;
